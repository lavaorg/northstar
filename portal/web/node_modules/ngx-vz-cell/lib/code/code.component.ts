import {Component, EventEmitter, Input, OnInit, Output} from "@angular/core";
import "codemirror/addon/fold/brace-fold";
import "codemirror/addon/fold/foldcode";
import "codemirror/addon/fold/foldgutter";
import "codemirror/addon/fold/xml-fold";
import "codemirror/addon/fold/markdown-fold";
import "codemirror/addon/fold/comment-fold";
import "codemirror/addon/selection/active-line";
import "codemirror/mode/javascript/javascript";
import "codemirror/mode/lua/lua";
import "codemirror/mode/r/r";
import "codemirror/mode/xml/xml";
import "codemirror/mode/htmlmixed/htmlmixed";
import {Modal} from "angular2-modal/plugins/bootstrap";
import {DialogRef} from 'angular2-modal';
import {CellOptionsModal, CellOptionsModalContext} from "./options/options.component";
import {overlayConfigFactory} from "angular2-modal";
import {CellInputModal, CellInputModalContext} from "./inputs/inputs.component";
import {Cell} from "../models/cell.model";
import {Options} from "../models/options.model";
import {LanguageConfig} from '../models/languageConfig.model';
import {Menu, MenuEvent, MenuEntry} from "../models/menu.model";


// TODO(s):
//  - Add auto resize: https://codemirror.net/demo/resize.html
//  - Would it be good for the output (if html) to support this sort of thing: https://codemirror.net/demo/buffers.html?
//  - Think about: https://codemirror.net/addon/edit/closetag.js
//  - Think about: https://codemirror.net/addon/edit/matchbrackets.js
//  - Think about: https://codemirror.net/addon/edit/closebrackets.js
//  - Should icon be moved out of the codemirror config? We might want that in our own object...
@Component({
    moduleId: module.id,
    selector: "code-cell",
    styleUrls: ["code.component.css", "../styles/common.css"],
    templateUrl: "code.component.html",
})

export class CodeCellComponent implements OnInit {
    @Input() cell: Cell;
    @Input() activeCell: boolean;
    @Input() readOnly: boolean;
    @Input() config: LanguageConfig;
    @Input() icon: string;
    @Input() menu: Menu;
    @Output() customEvent: EventEmitter<MenuEvent> = new EventEmitter();

    private editing: boolean;
    private modal: Modal;

    constructor(modal: Modal) {
        this.modal = modal;

        if (!this.menu) {
            this.menu = new Menu();
        }
    }

    public ngOnInit(): void {
        if (this.config) {
            if (this.readOnly) {
                this.config.editorConfig.readOnly = true;
            }
        }
    }

    public emitClicked(eventName: string) {
        let event: MenuEvent = new MenuEvent();
        event.cell = this.cell;
        event.name = eventName;
        this.customEvent.emit(event);
    }

    public updateValue(event): void {
        this.editing = false;
    }

    public configureOptions(): void {
        let modal = this.modal.open(CellOptionsModal,
            overlayConfigFactory({options: new Options(this.cell.options)}))
            .catch((err: string) => {
                console.error("Could not open options modal. Error was:", err);
            }).then((dialog: DialogRef<CellOptionsModalContext>) => {
                return dialog.result;
            }).then((options: any) => {
                    /* Return type is promise<any>, not promise<options>>*/
                    if (options) {
                        this.cell.options = options;
                    }
            });
    }

    public configureInputs(): void {
        let modal = this.modal.open(CellInputModal, overlayConfigFactory({inputs: this.cell.inputs}))
            .catch((err: string) => {
                console.error("Could not open input modal. Error was:", err);
                // TODO: Consider showing this as a banner
            }).then((dialog: DialogRef<CellInputModalContext>) => {
                return dialog.result;
            }).then((inputs: any) => {
                    /* Return type is promise<any>, not promise<inputs>>*/
                    if (inputs) {
                        this.cell.inputs = inputs;
                    }
            });
    }
}
