/**
 * Copyright 2017 Verizon Laboratories. All rights reserved.
 * See provided LICENSE file for use of this source code.
 */
import {Component, Input, OnDestroy} from "@angular/core";
import {DialogRef, ModalComponent} from "angular2-modal";
import {BSModalContext} from "angular2-modal/plugins/bootstrap";
import {Router} from "@angular/router";

import {Data} from "../graph/data";
import {DefaultGraph, Graphs} from "../graph/type";
import {GraphSettings} from "../graph/settings";

export class ConfigurationModalContext extends BSModalContext {
    public data: Data;
    public settings: GraphSettings;
}

@Component({
    moduleId: module.id,
    selector: "configuration",
    styleUrls: ["configuration.component.css", "../../../../../styles/common.css"],
    templateUrl: "configuration.component.html",
})
export class ConfigurationComponent implements ModalComponent<ConfigurationModalContext> {
    @Input() context: ConfigurationModalContext;
    public dialog: DialogRef<ConfigurationModalContext>;

    private readonly graphs = Graphs;

    // Define properties used by the view.
    private selectedGraph: any;
    private columns: string[];
    private selectedColumns: string[];

    private router: Router;

    constructor(dialog: DialogRef<ConfigurationModalContext>, router: Router) {
        this.dialog = dialog;
        this.router = router;
        this.context = dialog.context;
        dialog.setCloseGuard(this);

        this.selectedGraph = DefaultGraph;
        this.columns = this.context.data.getColumns();
        this.selectedColumns = this.context.settings.getSelectedColumns();

        for (let graph of Graphs) {
            if (graph.type === this.context.settings.getType()) {
                this.selectedGraph = graph;
                break;
            }
        }
    }

    // Helper method used to set column selections based on selected options.
    private isSelected(column: string): boolean {
        if (this.selectedColumns) {
            let index = this.selectedColumns.indexOf(column);
            if (index !== -1) {
                return true;
            }
        }

        return false;
    }

    // Helper method used by the view to set selected columns based on user selection.
    private setSelectedColumns(options): void {
        this.selectedColumns = Array.apply(null, options)
            .filter((option) => option.selected)
            .map((option) => option.value);
    }

    // Handle modal submit event.
    private onSubmit(value): void {
        // Save user selection.
        this.context.settings.setType(this.selectedGraph.type);
        this.context.settings.setSelectedColumns(this.selectedColumns);

        this.dialog.close(this.context);
    }

    // Handle modal graph button event.
    private cancel(value) {
        this.dialog.close();
    }
}
