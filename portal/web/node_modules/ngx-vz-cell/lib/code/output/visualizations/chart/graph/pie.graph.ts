/**
 * Copyright 2017 Verizon Laboratories. All rights reserved.
 * See provided LICENSE file for use of this source code.
 */
import {BaseGraph} from "./graph";
import {Data} from "./data";
import {GraphSettings} from "./settings";
import {GraphType} from "./type";
import {isNumeric} from "rxjs/util/isNumeric";
import {getGraphColor} from "./util";

declare let d3: any;

export class PieGraph extends BaseGraph {
    constructor(data, graphSettings: GraphSettings) {
        super(data, graphSettings);
    }

    // Returns type of this graph.
    public getType(): string {
        return GraphType.Pie;
    }

    // Implement base class abstract method.
    public isChart(): boolean {
        return true;
    }

    // getGraphData returns the data in the format expected by d3 library.
    protected getGraphData(data: Data, graphSettings: GraphSettings): any {
        let areas = [];
        let rows = data.getRows();
        let selectedColumns = graphSettings.getSelectedColumns();

        for (let selectedColumn of selectedColumns) {
            let columnIndex = data.getColumnIndex(selectedColumn);
            let columnColor = getGraphColor(columnIndex);

            // Translate row values into array of points. Note that we are expecting rows
            // to be in the following format:
            // {
            //      "rows": [
            //          [value1.1, value2.1],
            //          [value1.2, value2.2],
            //          ...
            //      ]
            //  }
            let sum: number = 0;

            for (let row of rows) {

                // if the column contains invalid data. Skip it.
                if (isNumeric(row[columnIndex]) === false) {
                    continue;
                }

                sum = sum + Number(row[columnIndex]);
            }

            let area = {
                color: columnColor,
                key: selectedColumn,
                y: sum,
            };

            areas.push(area);
        }

        return areas;
    }

    // getDefaultOptions returns options as expected by d3 library.
    protected getGraphOptions() {
        const ChartOptions = {
            chart: {
                type: GraphType.Pie,
                padAngle: 0.02,
                title: "", // TODO
                height: BaseGraph.DefaultHeight,
                x: function (d) {
                    return d.key + ": " + d3.format(",.1f")(d.y);
                },
                y: function (d) {
                    return d.y;
                },
                showLabels: true,
                showTooltipPercent: true,
                duration: 1500,
                growOnHover: true,
                labelType: "percent",
                valueFormat: function (d) {
                    return d.key;
                },
                labelThreshold: 0.1,
                labelSunbeamLayout: true,
                legend: {
                    margin: {
                        top: 5,
                        right: 35,
                        bottom: 5,
                        left: 0,
                    },
                },
            },
        };

        return ChartOptions;
    }
}
