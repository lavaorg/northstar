import {Component, OnInit} from "@angular/core";
import {DialogRef, Overlay, overlayConfigFactory} from "angular2-modal";
import {Modal} from "angular2-modal/plugins/bootstrap";
import {NvD3Component} from "ng2-nvd3";

import {BaseVisualizationComponent} from "./../baseVisualization.component";
import {Data} from "./graph/data";
import {Options} from "./../../../../models/options.model";
import {ConfigurationComponent, ConfigurationModalContext} from "./configuration/configuration.component";
import {GraphSettings} from "./graph/settings";
import {getGraph} from "./graph/util";
import {BaseGraph} from "./graph/graph";

import {Results} from "../../../../models/results.model";
import {ExecutionOutput} from "../../../../models/output.model";

@Component({
    moduleId: module.id,
    providers: [Modal, Overlay],
    selector: "chart",
    styleUrls: ["chart.component.css"],
    templateUrl: "chart.component.html",
})
export class ChartComponent extends BaseVisualizationComponent implements OnInit {

    // Note that these two attributes are inputs set by the visualization
    // component through accessor methods.
    private results: Results;
    private options: Options;

    private modal: Modal;
    private data: Data;
    private graphSettings: GraphSettings;

    // Graph represents the graph instance associated with the
    // current chat options.
    private graph: BaseGraph;

    constructor(modal: Modal) {
        super();
        this.modal = modal;
    }

    // Called when angular finishes initializing the component (i.e. inputs available).
    public ngOnInit() {
        // Note that options and results will be set before the component is created.

        if (this.isEmptyObject(this.options)) {
            this.options = new Options();
        }

        if (this.isEmptyObject(this.options.visualization.parameters)) {
            this.options.visualization.parameters = new GraphSettings();
        }

        // Set the graph settings based on chart component settings.
        this.graphSettings = new GraphSettings(this.options.visualization.parameters);

        // Set the graph data based on chart component results.
        this.data = new Data(this.results);

        // Use factory method to create chart base on type.
        this.graph = getGraph(this.data, this.graphSettings);
    }

    // Sets the output to be rendered by this component.
    public setOutput(output: ExecutionOutput): void {
        this.results = output.getResults();
        if (!this.results) {
            throw "Execution results invalid. Cannot proceed.";
        }

        let content = this.results.getContent();
        if (!content) {
            throw "Result content invalid. Cannot proceed";
        }

        let rows = content.rows;
        if (!rows) {
            throw "No rows returned for table.";
        }

        for (let row of rows) {
            if (!Array.isArray(row)) {
                throw "Row " + row + "is not a valid array. Cannot parse table.";
            }
        }
    }

    // Sets the options associated with this component.
    public setOptions(options: Options): void {
        this.options = options;
    }

    // Helper method used to check if object is empty. See
    // http://stackoverflow.com/questions/37111005/how-to-check-empty-object-in-angular-2-template-using-ngif
    private isEmptyObject(obj: any) {
        if (obj) {
            return Object.getOwnPropertyNames(obj).length === 0;
        }
        return true;
    }

    // Helper method used to check if object has a graph.
    private hasGraph(): boolean {
        if (this.graph) {
            return this.graph.isChart();
        }

        return false;
    }

    private openModal() {
        // Set the graph data based on user selections.
        let modal = this.modal.open(
            ConfigurationComponent,
            overlayConfigFactory({data: this.data, settings: this.graphSettings}));

        modal.catch((err) => {
            // TODO - We need to display error banner.
        })
            .then((dialog: DialogRef<ConfigurationComponent>) => {
                return dialog.result;
            })
            .then((result: any) => {
                // in the case of a cancel, result is nil. Ignore it.
                if (result) {
                    this.data = result.data;
                    this.graphSettings = result.settings;

                    // TODO - We should find a better way to save settings.
                    this.options.visualization.parameters = this.graphSettings;

                    // Use factory method to create chart based on type.
                    this.graph = getGraph(this.data, this.graphSettings);
                }
            })
            .catch((err) => {
                // TODO - We need to display error banner.
            });

        return modal;
    }
}
