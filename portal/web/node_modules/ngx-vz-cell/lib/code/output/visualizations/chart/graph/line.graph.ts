/**
 * Copyright 2017 Verizon Laboratories. All rights reserved.
 * See provided LICENSE file for use of this source code.
 */
import {BaseGraph} from "./graph";
import {Data} from "./data";
import {GraphSettings} from "./settings";
import {GraphType} from "./type";
import {getGraphColor} from "./util";
import {isNumeric} from "rxjs/util/isNumeric";

declare let d3: any;

export class LineGraph extends BaseGraph {
    constructor(data, graphSettings: GraphSettings) {
        super(data, graphSettings);
    }

    // Returns type of this graph.
    public getType(): string {
        return GraphType.Line;
    }

    // Implement base class abstract method.
    public isChart(): boolean {
        return true;
    }

    // getGraphData returns the data in the format expected by d3 library.
    protected getGraphData(data: Data, graphSettings: GraphSettings) {
        let lines = [];
        let line: any;
        let rows = data.getRows();
        let selectedColumns = graphSettings.getSelectedColumns();

        for (let selectedColumn of selectedColumns) {
            let columnIndex = data.getColumnIndex(selectedColumn);
            let columnColor = getGraphColor(columnIndex);

            // Translate row values into array of points. Note that we are expecting rows
            // to be in the following format:
            // {
            //      "rows": [
            //          [value1.1, value2.1],
            //          [value1.2, value2.2],
            //          ...
            //      ]
            //  }
            let points = [];
            let xValue: number = 0;
            for (let row of rows) {

                // if the column contains invalid data. Skip it.
                if (isNumeric(row[columnIndex]) === false) {
                    continue;
                }

                // Create the line points. Note that for now, x value
                // is just a counter.
                let point = {
                    x: xValue++,
                    y: row[columnIndex],
                };

                points.push(point);
            }

            if (points.length > 0) {
                line = {
                    area: false,
                    color: columnColor,
                    key: selectedColumn,
                    values: points,
                };

                lines.push(line);
            }
        }

        return lines;
    }

    // getGraphOptions returns the graph options as expected by d3 library.
    protected getGraphOptions(): any {

        // Create the structure expected by d3 library with some default options.
        const ChartOptions = {
            chart: {
                type: GraphType.Line,
                height: BaseGraph.DefaultHeight,
                margin: BaseGraph.DefaultMargin,
                x: function (d) {
                    return d.x;
                },
                y: function (d) {
                    return d.y;
                },
                useInteractiveGuideline: true,
                dispatch: {
                    stateChange: function (e) {},
                    changeState: function (e) {},
                    tooltipShow: function (e) {},
                    tooltipHide: function (e) {},
                },
                rightAlignYAxis: false,
                showLegend: true,
                showLabel: true,
                pointSize: 4.5,
                legendPosition: "top",
                clipEdge: true,
                clipRadius: 50,
                interpolate: d3.curveCatmullRom,
                useVoronoi: true,
                xAxis: {
                    axisLabel: BaseGraph.DefaultXAxisLabel,
                },
                yAxis: {
                    axisLabel: BaseGraph.DefaultYAxisLabel,
                    tickFormat: function (d) {
                        return d3.format(".02f")(d);
                    },
                    axisLabelDistance: BaseGraph.DefaultYAxisLabelDistance,
                },
            },
        };

        return ChartOptions;
    }
}
