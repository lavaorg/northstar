/**
 * Copyright 2017 Verizon Laboratories. All rights reserved.
 * See provided LICENSE file for use of this source code.
 */
import {Data} from "./data";
import {GraphSettings} from "./settings";

export abstract class BaseGraph {
    public static DefaultYAxisLabel = "Value(s)";
    public static DefaultYAxisLabelDistance = -10;
    public static DefaultXAxisLabel = "";
    public static DefaultHeight = 450;
    public static DefaultMargin = {
        bottom: 40,
        left: 55,
        right: 20,
        top: 20,
    };

    // Defines the original results data and settings.
    protected data: Data;
    protected settings: GraphSettings;

    // Defines the internal expected d3 library data.
    private graphData: any;

    constructor(data: Data, graphSettings: GraphSettings) {
        this.data = data;
        this.settings = graphSettings;

        // If no column selected. Set to all.
        if (this.settings.getSelectedColumns().length === 0) {
            this.settings.setSelectedColumns(this.data.getColumns());
        }

        // Set the graph data based on current graph.
        this.graphData = this.getGraphData(this.data, this.settings);

        // Set graph options. Note that for now, we do not support
        // saving/loading user selections.
        this.settings.chartOptions = this.getGraphOptions();
    }

    // Returns the type associated with this object.
    public abstract getType(): string;

    // Returns true if the graph represents a chart.
    public abstract isChart(): boolean;

    // Returns the column names associated with this graph.
    public getColumns(): string[] {
        return this.data.getColumns();
    }

    // Returns the rows associated with this graph.
    public getRows(): string[] {
        return this.data.getRows();
    }

    // Returns the data associated with this graph.
    public getData(): any {
        return this.graphData;
    }

    // Returns the settings associated with this graph.
    public getSettings(): GraphSettings {
        return this.settings;
    }

    // Returns the settings associated with this graph.
    public getOptions(): any {
        return this.settings.getChartOptions();
    }

    // Returns the graph data specific to an implementation.
    protected abstract getGraphData(data: Data, graphSettings: GraphSettings): any;

    // Returns the graph options specific to an implementation.
    protected abstract getGraphOptions(): any;
}
