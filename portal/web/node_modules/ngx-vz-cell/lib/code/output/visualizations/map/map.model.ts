export const MapType = {
    Map: "Map",
    Satellite: "Satellite",
    Light: "Light",
    Hybrid: "Hybrid"
};

export class Map {
    private type: string;
    private center: MapLocation;
    private zoom: number;
    private items: Item[];

    constructor(obj?: Object) {
        if (obj) {
            this.unmarshal(obj as Map);
        } else {
            this.type = MapType.Map;
            this.zoom = 2.7;
            this.center = new MapLocation();
            this.items = [];
        }
    }

    public getType(): string {
        return this.type;
    }

    public getCenter(): MapLocation {
        return this.center;
    }

    public getZoom(): number {
        return this.zoom;
    }

    public getItems(): Item[] {
        return this.items;
    }

    protected unmarshal(obj: Map) {
        this.type = obj.type;
        this.center = new MapLocation(obj.center);
        this.zoom = obj.zoom;
        this.items = [];

        let index = 1;
        for (let item of obj.items) {
            let newItem = new Item(item);
            if(!newItem.getLabel()) {
                newItem.setLabel("Item " + index)
            }
            this.items.push(newItem);

            index++;
        }

    }
}

export class MapLocation {
    private latitude: number;
    private longitude: number;

    constructor(obj?: Object) {
        if (obj) {
            this.unmarshal(obj as MapLocation);
        } else {
            this.latitude = 0;
            this.longitude = 0;
        }
    }

    public getLatitude(): number {
        return this.latitude;
    }

    public getLongitude(): number {
        return this.longitude;
    }

    protected unmarshal(obj: MapLocation) {
        this.longitude = obj.longitude;
        this.latitude = obj.latitude;
    }
}

export class Item {
    private label: string;
    private locations: MapLocation[];

    constructor(obj?: Object) {
        if (obj) {
            this.unmarshal(obj as Item);
        } else {
            this.label = "My Item";
            this.locations = [];
        }
    }

    public getLabel(): string {
        return this.label;
    }

    public setLabel(label: string) {
        this.label = label;
    }

    public getLocations(): MapLocation[] {
        return this.locations;
    }

    protected unmarshal(obj: Item) {
        this.label = obj.label;
        this.locations = [];
        for (let location of obj.locations) {
            this.locations.push(new MapLocation(location));
        }
    }

}