/**
 * Copyright 2017 Verizon Laboratories. All rights reserved.
 * See provided LICENSE file for use of this source code.
 */
import {BaseGraph} from "./graph";
import {Data} from "./data";
import {GraphSettings} from "./settings";
import {GraphType} from "./type";
import {isNumeric} from "rxjs/util/isNumeric";
import {getGraphColor} from "./util";

declare let d3: any;

export class BarGraph extends BaseGraph {
    constructor(data: Data, graphSettings: GraphSettings) {
        super(data, graphSettings);
    }

    // Implement base class abstract method.
    public getType(): string {
        return GraphType.Bar;
    }

    // Implement base class abstract method.
    public isChart(): boolean {
        return true;
    }

    // getGraphData returns the data in the format expected by d3 library.
    protected getGraphData(data: Data, graphSettings: GraphSettings) {
        let points = [];
        let rows = data.getRows();
        let selectedColumns = graphSettings.getSelectedColumns();

        for (let selectedColumn of selectedColumns) {
            let columnIndex = data.getColumnIndex(selectedColumn);
            let columnColor = getGraphColor(columnIndex);

            // Translate row values into array of points. Note that we are expecting rows
            // to be in the following format:
            // {
            //      "rows": [
            //          [value1.1, value2.1],
            //          [value1.2, value2.2],
            //          ...
            //      ]
            //  }
            for (let row of rows) {

                // If the rown conatins a non-numeric value, skip it.
                if (isNumeric(row[columnIndex]) === false) {
                    continue;
                }

                let point = {
                    color: columnColor,
                    label: selectedColumn,
                    series: 0,
                    value: row[columnIndex],
                };

                points.push(point);
            }
        }

        return [{
            key: selectedColumns.toString(),
            values: points,
        }];
    }

    // getGraphOptions returns the graph options as expected by d3 library.
    protected getGraphOptions(): any {
        const ChartOptions = {
            chart: {
                type: GraphType.Bar,
                height: BaseGraph.DefaultHeight,
                margin: BaseGraph.DefaultMargin,
                x: function (d) {
                    return d.label;
                },
                y: function (d) {
                    return d.value;
                },
                valueFormat: function (d) {
                    return d3.format(",.1f")(d);
                },
                duration: 500,
                xAxis: {
                    axisLabel: BaseGraph.DefaultXAxisLabel,
                },
                yAxis: {
                    axisLabel: BaseGraph.DefaultYAxisLabel,
                    axisLabelDistance: BaseGraph.DefaultYAxisLabelDistance,
                },
            },
        };

        return ChartOptions;
    }
}
