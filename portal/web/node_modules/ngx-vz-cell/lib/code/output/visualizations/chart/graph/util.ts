/**
 * Copyright 2017 Verizon Laboratories. All rights reserved.
 * See provided LICENSE file for use of this source code.
 */
import {BaseGraph} from "./graph";
import {BarGraph} from "./bar.graph";
import {Data} from "./data";
import {GraphType} from "./type";
import {GraphSettings} from "./settings";
import {LineGraph} from "./line.graph";
import {MultiBarGraph} from "./multibar.graph";
import {PieGraph} from "./pie.graph";
import {TableGraph} from "./table.graph";

// Define array of supported colors.
const colors = [
    "#dd4111",
    "#0077b3",
    "#e398f2",
    "#2535ea",
    "#fff98c",
    "#2ca02c",
    "#FF0000",
    "#009933",
    "#0000FF",
    "#a52a2a",
    "#00008b",
    "#008b8b",
    "#a9a9a9",
    "#006400",
    "#bdb76b",
    "#8b008b",
    "#556b2f",
    "#ff8c00",
    "#9932cc",
    "#8b0000",
    "#e9967a",
    "#00ffff",
    "#ff00ff",
    "#ffd700",
    "#008000",
    "#4b0082",
    "#f0e68c",
    "#add8e6",
    "#e0ffff",
    "#90ee90",
    "#d3d3d3",
    "#ffb6c1",
    "#ffffe0",
    "#00ff00",
    "#ff00ff",
    "#800000",
    "#000080",
    "#808000",
    "#ffa500",
    "#ffc0cb",
    "#800080",
    "#ff0000",
    "#c0c0c0",
    "#ffff00",
];

// getColor returns a random color.
export function getColor(): string {
    let color = Math.floor(Math.random() * 16777216).toString(16);
    return "#000000".slice(0, -color.length) + color;
}

// getGraphColor returns a color for the specified index.
export function getGraphColor(index: number): string {
    if (index < colors.length) {
        return colors[index];
    }

    return getColor();
}

// getGraph returns the proper graph based on type.
export function getGraph(data: Data, graphSettings: GraphSettings): BaseGraph {
    switch (graphSettings.getType()) {
        case GraphType.Table:
            return new TableGraph(data, graphSettings);
        case GraphType.Line:
            return new LineGraph(data, graphSettings);
        case GraphType.Bar:
            return new BarGraph(data, graphSettings);
        case GraphType.MultiBar:
            return new MultiBarGraph(data, graphSettings);
        case GraphType.Pie:
            return new PieGraph(data, graphSettings);
        default:
            // TODO - We should consider throwing an exception here.
            // In theory, this should never happen.
            return new TableGraph(data, graphSettings);
    }
}
