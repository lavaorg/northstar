import {BaseVisualizationComponent} from "../baseVisualization.component";
import {Component, OnInit} from "@angular/core";
import {MQ} from "./mq-map.js";
import * as L from "leaflet";
import "@asymmetrik/angular2-leaflet";
import {Item, Map, MapType} from "./map.model";
import {ExecutionOutput} from "../../../../models/output.model";
import {Options} from "../../../../models/options.model";

const colors = ["#dd4111", "#0077b3", "#e398f2", "#2535ea", "#fff98c", "#2ca02c", "#FF0000", "#009933", "#0000FF", "#F3FAFD"];
const ZoomWorldview = 2.7;
const MapBounds = L.latLngBounds(L.latLng(-90, -180), L.latLng(90,180));

@Component({
    moduleId: module.id,
    selector: "map",
    templateUrl: "map.component.html",
    styleUrls: ["../../../../styles/common.css"]
})
export class MapComponent extends BaseVisualizationComponent implements OnInit {
    zoom: number;
    map: Map;
    center: L.LatLng;
    baseLayer: L.Layer[];
    layerControl: any;
    options: any;

    constructor() {
        super();
    }

    private createItemLayer(item: Item, color: string): L.LayerGroup {
        let layers: L.Layer[] = [];
        let latLongs = [];

        for (let location of item.getLocations()) {
            let marker = L.marker([location.getLatitude(), location.getLongitude()], {
                icon: L.icon({
                    iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.9/images/marker-icon.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.9/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                }),
            }).bindPopup('<div class="panel panel-default">' +
                '<div class="panel-heading" style="background-color: maroon; color: white">' + item.getLabel() + '</div>' +
                '<div class="panel-body">Lon: ' + location.getLatitude() + '<br>Lat: ' + location.getLongitude() + '</div>' +
                '</div>', {
                closeButton: false,
            });

            layers.push(marker);
            latLongs.push(marker.getLatLng());
        }

        let polyLine = L.polyline(latLongs, {color: color});
        layers.push(polyLine);

        return L.layerGroup(layers);
    }

    // Called when angular finishes initializing the component (i.e. inputs available).
    public ngOnInit() {
        let layers: L.Layer[] = [];
        let overlays = {};

        switch (this.map.getType()) {
            case MapType.Satellite:
                layers.push(MQ.satelliteLayer());
                break;
            case MapType.Light:
                layers.push(MQ.lightLayer());
                break;
            case MapType.Hybrid:
                layers.push(MQ.hybridLayer());
                break;
            default: //case MapType.Map:
                layers.push(MQ.mapLayer());
                break;
        }

        let index = 0;
        for (let item of this.map.getItems()) {
            let layerGroup = this.createItemLayer(item, colors[index % colors.length]);
            layers.push(layerGroup);
            overlays[item.getLabel()] = layerGroup;
            index++;
        }

        this.layerControl = {
            overlays: overlays
        };




        let center = this.map.getCenter();
        this.options = {
            layers: layers,
            zoom: this.map.getZoom(),
            center: L.latLng({lat: center.getLatitude(), lng: center.getLongitude()}),
            worldCopyJump: true,
            minZoom: ZoomWorldview,
            maxBounds: MapBounds,
        };
    }

    // Sets the output to be rendered by this component.
    public setOutput(output: ExecutionOutput): void {
        if (!output) {
            throw "Can't generate map due to invalid output.";
        }

        let results = output.getResults();
        if (!results) {
            throw "Can't generate map due to invalid results.";
        }

        let content = results.getContent();
        if (!content) {
            throw "Can't generate map due to invalid content."
        }
        this.map = new Map(content);

    }

    // Sets the options associated with this component.
    public setOptions(options: Options): void {
        // Note that no options are supported by this component.
    }
}
