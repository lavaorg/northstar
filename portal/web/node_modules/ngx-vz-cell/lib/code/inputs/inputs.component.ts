import {Component, EventEmitter, Input, OnDestroy, Output} from "@angular/core";
import {CloseGuard, DialogRef, ModalComponent} from "angular2-modal";
import {BSModalContext} from "angular2-modal/plugins/bootstrap";
import {Router} from "@angular/router";
import {Subscription} from "rxjs";
import { KeyValueMapping } from '../../utilities/keyValue';
import { KeyValue } from './../../utilities/keyValue.model';

export class CellInputModalContext extends BSModalContext {
    public inputs: Object;
}

@Component({
    moduleId: module.id,
    styleUrls: ["../../styles/common.css"],
    templateUrl: "inputs.component.html",
})

export class CellInputModal implements ModalComponent<CellInputModalContext>, OnDestroy {
    public dialog: DialogRef<CellInputModalContext>;
    private context: CellInputModalContext;
    private navigateSubscription: any;
    private router: Router;
    private data: KeyValue[];
    private newVariable: KeyValue;

    constructor(dialog: DialogRef<CellInputModalContext>, router: Router) {
        this.router = router;

        // Set up the dialog and grab our arguments passed in via the context
        this.dialog = dialog;
        this.context = dialog.context;
        dialog.setCloseGuard(this);

        // This prevents a modal dialog from being closed while it is open.
        this.navigateSubscription = this.router.events.subscribe((event) => {
            if (event.constructor.name === "NavigationStart") {
                this.router.navigate([this.router.url]);
            }
        });

        this.newVariable = new KeyValue();
        this.data = KeyValueMapping.FromObject(this.context.inputs);
    }

    public ngOnDestroy(): void {
        // Whenever we destroy our component, make sure to turn off the dialog watcher.
        this.navigateSubscription.unsubscribe();
    }

    public ok(): void {
        // Transform arguments to object.
        let data = KeyValueMapping.ToObject(this.data);
        this.dialog.close(data);
    }

    public cancel(): void {
        this.dialog.close();
    }

    public add(): void {
        if (this.newVariable.key && this.newVariable.value) {
            this.data.push(this.newVariable);
            this.newVariable = new KeyValue();
        }
    }

    public delete(entry: KeyValue): void {
        this.data.splice(this.data.indexOf(entry), 1);
    }
}
