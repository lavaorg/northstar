import {Results} from "./results.model";

export class ExecutionOutput {
    // Constant definitions for execution status.
    public static readonly Success = "Success";
    public static readonly Failed = "Failed";

    public lastExecution: string;
    public state: string;
    public stdout: string;
    public stderr: string;
    public elapsedTime: number;
    public results: Results;

    constructor(obj?: Object) {
        if (obj) {
            this.unmarshal(obj as ExecutionOutput);
        } else {
            this.results = new Results();
        }
    }

    // Returns true if execution output status is not successful.
    public failedExecution(): boolean {
        return this.state !== ExecutionOutput.Success;
    }

    // Sets the status of the execution to error with the specified description.
    public setExecutionError(description: string): void {
        this.state = ExecutionOutput.Failed;
        this.stderr = description;
    }

    // Returns the execution error, if any, associated with this execution.
    public getExecutionError(): string {
        // TODO - We need better interface here.
        if (this.state !== ExecutionOutput.Success) {
            return this.stderr;
        }

        return "";
    }

    // Returns the results associated with this execution.
    public getResults(): Results {
        return this.results;
    }

    // Helper method used to copy execition output to this object.
    private unmarshal(obj: ExecutionOutput) {
        this.lastExecution = obj.lastExecution;
        this.state = obj.state;
        this.stdout = obj.stdout;
        this.stderr = obj.stderr;
        this.elapsedTime = obj.elapsedTime;
        this.results = new Results(obj.results);
    }
}